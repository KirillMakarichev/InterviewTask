// <auto-generated />
using InterviewTask.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InterviewTask.Migrations
{
    [DbContext(typeof(UsersContext))]
    [Migration("20231017114921_AddedImages")]
    partial class AddedImages
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InterviewTask.DataBase.Models.Friendship", b =>
                {
                    b.Property<int>("UserRespondingId")
                        .HasColumnType("integer");

                    b.Property<int>("UserRequestingId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("UserRespondingId", "UserRequestingId");

                    b.HasIndex("UserRequestingId");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("InterviewTask.DataBase.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("InterviewTask.DataBase.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("InterviewTask.DataBase.Models.Friendship", b =>
                {
                    b.HasOne("InterviewTask.DataBase.Models.User", "UserRequesting")
                        .WithMany("Friendships")
                        .HasForeignKey("UserRequestingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InterviewTask.DataBase.Models.User", "UserResponding")
                        .WithMany()
                        .HasForeignKey("UserRespondingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRequesting");

                    b.Navigation("UserResponding");
                });

            modelBuilder.Entity("InterviewTask.DataBase.Models.Image", b =>
                {
                    b.HasOne("InterviewTask.DataBase.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("InterviewTask.DataBase.Models.User", b =>
                {
                    b.Navigation("Friendships");
                });
#pragma warning restore 612, 618
        }
    }
}
